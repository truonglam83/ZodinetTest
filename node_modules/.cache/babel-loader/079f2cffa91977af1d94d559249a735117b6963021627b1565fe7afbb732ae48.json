{"ast":null,"code":"var _jsxFileName = \"D:\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Question 1\n  // - Giving an API endpoint: https://jsonplaceholder.typicode.com/posts.\n  // - Use JavaScript or TypeScript to write a function that fetches data from this API endpoint.\n  // - Use JavaScript or TypeScript to write a function that creates a new post using this API endpoint.\n  // - (Optional) Create a UI that has 2 buttons: “Fetch” and “Create” that execute the two functions above.\n  // Question 2\n  // - Using object-oriented programming to create a Stack class and its methods: find, push, pop, size, and isEmpty.\n  // Question 3\n  //  - How would you optimize this code to follow clean code principles and best practices in terms of naming conventions, readability, maintainability, and functionality?\n\n  const [posts, setPosts] = useState([]);\n  const title = 'Zodinet Title';\n  const body = 'Zodinet Body';\n  //Question 1:\n  //fetch Data\n  const fetchPosts = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/posts');\n    const data = await res.json();\n    if (data) {\n      setPosts(data);\n      // console.log(data);\n    } else {\n      setPosts('No data');\n      // console.log('No data');\n    }\n  };\n\n  //create new post\n  const createPost = async (title, body) => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/posts', {\n      method: 'POST',\n      body: JSON.stringify({\n        title,\n        body\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log(1);\n    const newData = await res.json();\n    setPosts([...posts, newData]);\n    console.log(posts);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"If you wanna fetch Posts. Click FETCH\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchPosts,\n      children: \"FETCH\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => createPost('title', 'body'),\n      children: \"CREATE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts === null || posts === void 0 ? void 0 : posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QFg9xhJ0x9yrnvUQrdhfY5IZlDs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","App","posts","setPosts","title","body","fetchPosts","res","fetch","data","json","createPost","method","JSON","stringify","headers","console","log","newData","map","post","index"],"sources":["D:/my-app/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n// Question 1\n// - Giving an API endpoint: https://jsonplaceholder.typicode.com/posts.\n// - Use JavaScript or TypeScript to write a function that fetches data from this API endpoint.\n// - Use JavaScript or TypeScript to write a function that creates a new post using this API endpoint.\n// - (Optional) Create a UI that has 2 buttons: “Fetch” and “Create” that execute the two functions above.\n// Question 2\n// - Using object-oriented programming to create a Stack class and its methods: find, push, pop, size, and isEmpty.\n// Question 3\n//  - How would you optimize this code to follow clean code principles and best practices in terms of naming conventions, readability, maintainability, and functionality?\n\nconst [posts, setPosts] = useState([]);\nconst title = 'Zodinet Title';\nconst body = 'Zodinet Body';\n//Question 1:\n//fetch Data\nconst fetchPosts = async () => {\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts');\n  const data = await res.json();\n  if(data){\n    setPosts(data);\n    // console.log(data);\n  }\n  else{\n    setPosts('No data')\n    // console.log('No data');\n  }\n}\n\n//create new post\nconst createPost = async (title, body) => {\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    body: JSON.stringify({\n      title,\n      body\n    }),\n    headers: { \n      \"Content-Type\": \"application/json\",\n    },  \n  });\n  console.log(1);\n  const newData = await res.json();\n  setPosts([...posts, newData]);\n  console.log(posts);\n} \n\n\n\n  return (\n    <div className=\"App\">\n      <h4>If you wanna fetch Posts. Click FETCH</h4>\n      <button onClick={fetchPosts}>FETCH</button>\n      <button onClick={() => createPost('title', 'body')}>CREATE</button>\n      <ul>\n        {posts?.map((post, index) => (\n          <li key={index}>\n            <h3>{post.title}</h3>\n            <p>{post.body}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAAC;AAEnB,SAASC,GAAG,GAAG;EAAA;EACf;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGH,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMI,KAAK,GAAG,eAAe;EAC7B,MAAMC,IAAI,GAAG,cAAc;EAC3B;EACA;EACA,MAAMC,UAAU,GAAG,YAAY;IAC7B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;IACrE,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,EAAE;IAC7B,IAAGD,IAAI,EAAC;MACNN,QAAQ,CAACM,IAAI,CAAC;MACd;IACF,CAAC,MACG;MACFN,QAAQ,CAAC,SAAS,CAAC;MACnB;IACF;EACF,CAAC;;EAED;EACA,MAAMQ,UAAU,GAAG,OAAOP,KAAK,EAAEC,IAAI,KAAK;IACxC,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MACpEI,MAAM,EAAE,MAAM;MACdP,IAAI,EAAEQ,IAAI,CAACC,SAAS,CAAC;QACnBV,KAAK;QACLC;MACF,CAAC,CAAC;MACFU,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;IACd,MAAMC,OAAO,GAAG,MAAMX,GAAG,CAACG,IAAI,EAAE;IAChCP,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEgB,OAAO,CAAC,CAAC;IAC7BF,OAAO,CAACC,GAAG,CAACf,KAAK,CAAC;EACpB,CAAC;EAIC,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAA,UAAI;IAAqC;MAAA;MAAA;MAAA;IAAA,QAAK,eAC9C;MAAQ,OAAO,EAAEI,UAAW;MAAA,UAAC;IAAK;MAAA;MAAA;MAAA;IAAA,QAAS,eAC3C;MAAQ,OAAO,EAAE,MAAMK,UAAU,CAAC,OAAO,EAAE,MAAM,CAAE;MAAA,UAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAS,eACnE;MAAA,UACGT,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEiB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACtB;QAAA,wBACE;UAAA,UAAKD,IAAI,CAAChB;QAAK;UAAA;UAAA;UAAA;QAAA,QAAM,eACrB;UAAA,UAAIgB,IAAI,CAACf;QAAI;UAAA;UAAA;UAAA;QAAA,QAAK;MAAA,GAFXgB,KAAK;QAAA;QAAA;QAAA;MAAA,QAIf;IAAC;MAAA;MAAA;MAAA;IAAA,QACC;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEV;AAAC,GAhEQpB,GAAG;AAAA,KAAHA,GAAG;AAkEZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}