{"ast":null,"code":"var _jsxFileName = \"D:\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Question 1\n  // - Giving an API endpoint: https://jsonplaceholder.typicode.com/posts.\n  // - Use JavaScript or TypeScript to write a function that fetches data from this API endpoint.\n  // - Use JavaScript or TypeScript to write a function that creates a new post using this API endpoint.\n  // - (Optional) Create a UI that has 2 buttons: “Fetch” and “Create” that execute the two functions above.\n  // Question 2\n  // - Using object-oriented programming to create a Stack class and its methods: find, push, pop, size, and isEmpty.\n  // Question 3\n  //  - How would you optimize this code to follow clean code principles and best practices in terms of naming conventions, readability, maintainability, and functionality?\n\n  const [posts, setPosts] = useState([]);\n  const title = 'Zodinet Title';\n  const body = 'Zodinet Body';\n  //Question 1:\n  //fetch Data\n  const fetchPosts = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/posts');\n    const data = await res.json();\n    if (data) {\n      setPosts(data);\n      // console.log(data);\n    } else {\n      setPosts('No data');\n      // console.log('No data');\n    }\n  };\n\n  //create new post\n  const createPost = async (title, body) => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/posts', {\n      method: 'POST',\n      body: JSON.stringify({\n        title,\n        body\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const newData = await res.json();\n    setPosts([...posts, newData]);\n    console.log(posts);\n  };\n\n  //Question 2:\n  class Stack {\n    constructor() {\n      this.stack = [];\n    }\n    find(e) {\n      return this.stack.indexOf(e);\n    }\n    push(e) {\n      this.stack.push(e);\n    }\n    pop() {\n      return this.stack.pop();\n    }\n    size() {\n      return this.stack.length;\n    }\n    isEmpty() {\n      return this.stack.length === 0;\n    }\n  }\n  let newStack = new Stack();\n  console.log(newStack.push(1));\n  console.log(newStack.push(2));\n  console.log(newStack.push(3));\n  console.log(newStack.find(2));\n  console.log(newStack.pop());\n  console.log(newStack.size());\n  console.log(newStack.isEmpty());\n  console.log(newStack);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"If you wanna fetch Posts. Click FETCH\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"You can create Post with Title, Body. Click CREATE.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchPosts,\n      children: \"FETCH\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => createPost(title, body),\n      children: \"CREATE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts === null || posts === void 0 ? void 0 : posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"QFg9xhJ0x9yrnvUQrdhfY5IZlDs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","App","posts","setPosts","title","body","fetchPosts","res","fetch","data","json","createPost","method","JSON","stringify","headers","newData","console","log","Stack","constructor","stack","find","e","indexOf","push","pop","size","length","isEmpty","newStack","map","post","index"],"sources":["D:/my-app/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  // Question 1\n  // - Giving an API endpoint: https://jsonplaceholder.typicode.com/posts.\n  // - Use JavaScript or TypeScript to write a function that fetches data from this API endpoint.\n  // - Use JavaScript or TypeScript to write a function that creates a new post using this API endpoint.\n  // - (Optional) Create a UI that has 2 buttons: “Fetch” and “Create” that execute the two functions above.\n  // Question 2\n  // - Using object-oriented programming to create a Stack class and its methods: find, push, pop, size, and isEmpty.\n  // Question 3\n  //  - How would you optimize this code to follow clean code principles and best practices in terms of naming conventions, readability, maintainability, and functionality?\n\n  const [posts, setPosts] = useState([]);\n  const title = 'Zodinet Title';\n  const body = 'Zodinet Body';\n  //Question 1:\n  //fetch Data\n  const fetchPosts = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/posts');\n    const data = await res.json();\n    if (data) {\n      setPosts(data);\n      // console.log(data);\n    }\n    else {\n      setPosts('No data')\n      // console.log('No data');\n    }\n  }\n\n  //create new post\n  const createPost = async (title, body) => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/posts', {\n      method: 'POST',\n      body: JSON.stringify({\n        title,\n        body\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const newData = await res.json();\n    setPosts([...posts, newData]);\n    console.log(posts);\n  }\n\n\n  //Question 2:\n  class Stack {\n    constructor() {\n      this.stack = [];\n    }\n\n    find(e) {\n      return this.stack.indexOf(e);\n    }\n\n    push(e) {\n      this.stack.push(e);\n    }\n\n    pop() {\n      return this.stack.pop();\n    }\n\n    size() {\n      return this.stack.length;\n    }\n\n    isEmpty() {\n      return this.stack.length === 0;\n    }\n}\n  let newStack = new Stack();\n  console.log(newStack.push(1));\n  console.log(newStack.push(2));\n  console.log(newStack.push(3));\n  console.log(newStack.find(2));\n  console.log(newStack.pop());\n  console.log(newStack.size());\n  console.log(newStack.isEmpty())\n  console.log(newStack);\n\nreturn (\n  <div className=\"App\">\n    <h4>If you wanna fetch Posts. Click FETCH</h4>\n    <h4>You can create Post with Title, Body. Click CREATE.</h4>\n    <button onClick={fetchPosts}>FETCH</button>\n    <button onClick={() => createPost(title, body)}>CREATE</button>\n    <ul>\n      {posts?.map((post, index) => (\n        <li key={index}>\n          <h3>{post.title}</h3>\n          <p>{post.body}</p>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}